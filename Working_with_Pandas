##############################################################################################
## I'm building these as I go along and get more into data science. Feel free to contribute ##
##############################################################################################

############ ROW OPERATIONS ################
## List all rows in dataframe
list(df) # In this case 'df' is the name of the dataframe

## Dropping all rows in a dataframe based on a column containing NaN values (NaN means Not a Number, which may occur when reading in a column(s) with no data values for some cells)
data_df.dropna(subset=['published_at'], inplace=True) # Removes all rows with NaN values for a specific column (e.g. published_at time)

############ COLUMN OPERATIONS ################
## Show all columns in a single row
df.columns # In this case, df is the name of the dataframe

## Dropping columns from a dataframe based on the 'integer' location of the columns
cols = [1,4] # If its more than one column you can first create a list containing the relevant column numbers
df.drop(df.columns[cols],axis=1,inplace=True) # This will then drop the relevant columns from the dataframe

## Converting a pandas column to a numpy array
a = np.asarray(newspaper['names'])

## Converting a pandas column to a list
a = list(newspaper['names'])

## Convert all values in a pandas column to lower case
df['names']=df['names'].str.lower()

## Remove all whitespaces from pandas column
s[0]=s[0].str.strip(to_strip=' ') # ' ' could be replace with another character that you'd like to remove

## Rename a specific column
df.rename(columns={'old_column_name': 'new_column_name'}, inplace=True)

# Rename all columns
df.columns = ['column0', 'column1','column2', 'column3'] # The number of new names must match the number of columns

## Set index to a specific column
df.set_index('published_at',inplace=True)

## Group and count by values in a specific column
# The index of the dataframe must be of datetime type for this to work
grouped = df.groupby(['author', pd.Grouper(freq='D')]).count()


############ DATAFRAME OPERATIONS ################
## Creating a dataframe with sequentual time values
range = pd.date_range('2015-01-01', '2015-12-31', freq='15min') # start data, end date, frequency of interval
df = pd.DataFrame(index = range) # Sets the index to the time values
